#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""

import pickle
import numpy as np
import os
import json
from datetime import datetime

def save_training_data_to_files():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
    history_files = [f for f in os.listdir('.') if f.startswith('training_history_') and f.endswith('.pkl')]
    
    if not history_files:
        print("‚ùå –§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –í–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    latest_file = max(history_files, key=lambda x: os.path.getmtime(x))
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {latest_file}")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    with open(latest_file, 'rb') as f:
        history = pickle.load(f)
    
    epochs_count = len(history['loss'])
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # 1. JSON —Ñ–æ—Ä–º–∞—Ç - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    json_data = {}
    for key, values in history.items():
        json_data[key] = [float(v) for v in values]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float –¥–ª—è JSON
    
    json_filename = f"training_data_{epochs_count}epochs_{timestamp}.json"
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, indent=2, ensure_ascii=False)
    print(f"üíæ JSON –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_filename}")
    
    # 2. CSV —Ñ–æ—Ä–º–∞—Ç - –¥–ª—è Excel/–∞–Ω–∞–ª–∏–∑–∞
    csv_filename = f"training_data_{epochs_count}epochs_{timestamp}.csv"
    with open(csv_filename, 'w', encoding='utf-8') as f:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = list(history.keys())
        f.write("epoch," + ",".join(headers) + "\n")
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —ç–ø–æ—Ö–∞–º
        for i in range(epochs_count):
            row = [str(i+1)]  # –ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏
            for key in headers:
                row.append(str(history[key][i]))
            f.write(",".join(row) + "\n")
    print(f"üìä CSV –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_filename}")
    
    # 3. –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç - –¥–ª—è —á—Ç–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ–º
    txt_filename = f"training_report_{epochs_count}epochs_{timestamp}.txt"
    with open(txt_filename, 'w', encoding='utf-8') as f:
        f.write(f"–û–¢–ß–ï–¢ –ü–û –û–ë–£–ß–ï–ù–ò–Æ EEG –ú–û–î–ï–õ–ò\n")
        f.write(f"="*50 + "\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö: {epochs_count}\n")
        f.write(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {latest_file}\n\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        f.write("–§–ò–ù–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ú–ï–¢–†–ò–ö:\n")
        f.write("-" * 30 + "\n")
        for key, values in history.items():
            final_val = values[-1]
            best_val = max(values) if 'loss' not in key else min(values)
            best_epoch = (values.index(best_val) + 1) if 'loss' not in key else (values.index(best_val) + 1)
            
            f.write(f"{key:20s}: {final_val:.6f} (—Ñ–∏–Ω–∞–ª)\n")
            f.write(f"{'':<20s}: {best_val:.6f} (–ª—É—á—à–∏–π, —ç–ø–æ—Ö–∞ {best_epoch})\n\n")
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        f.write("–î–ò–ù–ê–ú–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø (–∫–∞–∂–¥—ã–µ 10% —ç–ø–æ—Ö):\n")
        f.write("-" * 40 + "\n")
        step = max(1, epochs_count // 10)
        f.write(f"{'–≠–ø–æ—Ö–∞':>6s} {'Loss':>8s} {'Val_Loss':>10s} {'Accuracy':>10s} {'Val_Acc':>10s}")
        if 'f1_score' in history:
            f.write(f" {'F1_Score':>10s}")
        f.write("\n")
        
        for i in range(0, epochs_count, step):
            f.write(f"{i+1:>6d} {history['loss'][i]:>8.4f} {history['val_loss'][i]:>10.4f}")
            f.write(f" {history['accuracy'][i]:>10.4f} {history['val_accuracy'][i]:>10.4f}")
            if 'f1_score' in history:
                f.write(f" {history['f1_score'][i]:>10.4f}")
            f.write("\n")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —ç–ø–æ—Ö–∞
        i = epochs_count - 1
        f.write(f"{i+1:>6d} {history['loss'][i]:>8.4f} {history['val_loss'][i]:>10.4f}")
        f.write(f" {history['accuracy'][i]:>10.4f} {history['val_accuracy'][i]:>10.4f}")
        if 'f1_score' in history:
            f.write(f" {history['f1_score'][i]:>10.4f}")
        f.write("\n")
        
    print(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {txt_filename}")
    
    # 4. Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plot_script = f"plot_training_{epochs_count}epochs_{timestamp}.py"
    with open(plot_script, 'w', encoding='utf-8') as f:
        f.write('''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""

import matplotlib.pyplot as plt
import json

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
with open('{}', 'r', encoding='utf-8') as f:
    data = json.load(f)

epochs = list(range(1, len(data['loss']) + 1))

# –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
plt.figure(figsize=(15, 10))

# –ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å
plt.subplot(2, 3, 1)
plt.plot(epochs, data['loss'], label='Training Loss', color='red')
plt.plot(epochs, data['val_loss'], label='Validation Loss', color='blue')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
plt.subplot(2, 3, 2)
plt.plot(epochs, data['accuracy'], label='Training Accuracy', color='green')
plt.plot(epochs, data['val_accuracy'], label='Validation Accuracy', color='orange')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ Precision
plt.subplot(2, 3, 3)
plt.plot(epochs, data['precision'], label='Training Precision', color='purple')
plt.plot(epochs, data['val_precision'], label='Validation Precision', color='brown')
plt.title('Model Precision')
plt.xlabel('Epoch')
plt.ylabel('Precision')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ Recall
plt.subplot(2, 3, 4)
plt.plot(epochs, data['recall'], label='Training Recall', color='pink')
plt.plot(epochs, data['val_recall'], label='Validation Recall', color='gray')
plt.title('Model Recall')
plt.xlabel('Epoch')
plt.ylabel('Recall')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ F1 Score
plt.subplot(2, 3, 5)
if 'f1_score' in data:
    plt.plot(epochs, data['f1_score'], label='Training F1', color='cyan')
    plt.plot(epochs, data['val_f1_score'], label='Validation F1', color='magenta')
    plt.title('F1 Score')
    plt.xlabel('Epoch')
    plt.ylabel('F1 Score')
    plt.legend()
    plt.grid(True, alpha=0.3)

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
plt.subplot(2, 3, 6)
plt.plot(epochs, data['val_accuracy'], label='Val Accuracy')
plt.plot(epochs, data['val_precision'], label='Val Precision') 
plt.plot(epochs, data['val_recall'], label='Val Recall')
if 'val_f1_score' in data:
    plt.plot(epochs, data['val_f1_score'], label='Val F1 Score')
plt.title('Validation Metrics')
plt.xlabel('Epoch')
plt.ylabel('Score')
plt.legend()
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('training_plots_{}_epochs.png', dpi=300, bbox_inches='tight')
plt.show()

print("–ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫: training_plots_{}_epochs.png")
'''.format(json_filename, epochs_count, epochs_count))
    
    print(f"üêç Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {plot_script}")
    
    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {len([json_filename, csv_filename, txt_filename, plot_script])} —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
    print("üìà –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"   python {plot_script}")

if __name__ == "__main__":
    save_training_data_to_files()