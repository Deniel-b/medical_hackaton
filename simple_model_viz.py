from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, Flatten
from tensorflow.keras.layers import PReLU, LeakyReLU
from tensorflow.keras.utils import plot_model
import visualkeras

def create_model():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ train_eeg_classifier.py"""
    model = Sequential([
        # –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        Flatten(input_shape=(15, 20)),  # 15 —ç–ø–æ—Ö √ó 20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ = 300
        
        # –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        Dense(32, activation='relu'),
        Dropout(0.3),
        BatchNormalization(),
        
        # –°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
        Dense(64, activation=PReLU()),
        Dropout(0.3),
        BatchNormalization(),
        
        Dense(128, activation=PReLU()),
        Dropout(0.3),
        BatchNormalization(),
        
        Dense(256, activation=PReLU()),
        Dropout(0.3),
        BatchNormalization(),
        
        Dense(512, activation=PReLU()),        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        Dropout(0.3),
        BatchNormalization(),
        
        Dense(256, activation='relu'),
        BatchNormalization(),
        
        Dense(128, activation=PReLU()),
        Dropout(0.1),
        BatchNormalization(),
        
        Dense(64, activation=PReLU()),
        Dropout(0.1),
        
        Dense(32, activation=LeakyReLU(alpha=0.1)),
        
        Dense(16, activation=PReLU()),
        Dropout(0.1),
        
        # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        Dense(7, activation='softmax')         # 7 –∫–ª–∞—Å—Å–æ–≤ –¥–≤–∏–∂–µ–Ω–∏–π
    ])
    
    return model

def visualize_model():
    print("üß† –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = create_model()
    model.compile(optimizer='nadam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    
    print("üìä –°–≤–æ–¥–∫–∞ –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    plot_model(
        model, 
        to_file='model_architecture.png', 
        show_shapes=True, 
        show_layer_names=True,
        dpi=300,
        rankdir='TB'
    )
    print("‚úÖ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'model_architecture.png'")
    
    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
    plot_model(
        model, 
        to_file='model_architecture_horizontal.png', 
        show_shapes=True, 
        show_layer_names=True,
        dpi=300,
        rankdir='LR'
    )
    print("‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'model_architecture_horizontal.png'")
    
    print("\nüéØ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("- model_architecture.png (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è)")
    print("- model_architecture_horizontal.png (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è)")

def create_beautiful_visualization():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å visualkeras"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = create_model()
    model.compile(optimizer='nadam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    
    print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è Keras –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ Keras –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    try:
        plot_model(
            model, 
            to_file='model_architecture.png', 
            show_shapes=True, 
            show_layer_names=True,
            rankdir='TB',
            expand_nested=True,
            dpi=300
        )
        print("‚úÖ Keras –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'model_architecture.png'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Keras –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
    
    # 2. –ö—Ä–∞—Å–∏–≤–∞—è visualkeras –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π visualkeras –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    try:
        # –ë–∞–∑–æ–≤–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        img = visualkeras.layered_view(model, legend=True, spacing=50)
        img.save('eeg_model_beautiful.png')
        print("‚úÖ –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'eeg_model_beautiful.png'")
        
        # 3D –≤–µ—Ä—Å–∏—è
        img_3d = visualkeras.layered_view(
            model, 
            legend=True, 
            draw_volume=True, 
            spacing=50
        )
        img_3d.save('eeg_model_3d.png')
        print("‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'eeg_model_3d.png'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ visualkeras: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é...")
        try:
            img = visualkeras.layered_view(model)
            img.save('eeg_model_simple.png')
            print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'eeg_model_simple.png'")
        except Exception as e2:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å visualkeras: {e2}")
    
    print(f"\n‚ú® –ú–æ–¥–µ–ª—å –∏–º–µ–µ—Ç {model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("üéØ –í—ã—Ö–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã: Up, Down, Left, Right, Back, Forward, None")
    print("\nüéâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    create_beautiful_visualization()